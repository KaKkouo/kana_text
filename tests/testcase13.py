#!/usr/bin/python
import sys
import unittest
sys.path.append('sphinxcontrib')
from src import KanaText

#非表示指定の「a-i」「q-y」の動作
testcase4i = [
    #テストケース
    # 1 2 3 4 5 6 7 8 9101112131415
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五',
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^',
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1a1', #1
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1b1', #2
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1c1', #3
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1d1', #4
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1e1', #5
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1f1', #6
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1g1', #7
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1h1', #8
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1i1', #9
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1j1',
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1q1', #1
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1r1', #2
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1s1', #3
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1t1', #4
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1u1', #5
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1v1', #6
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1w1', #7
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1x1', #8
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1y1', #9
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1z1',
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^ii', #99
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^yy', #99
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1ii1', #99
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1yy1', #99
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1ff1', 
    'いろはにほへとちりぬるをわかよ|壱弐参四五六七八九拾壱弐参四五^1uu1', 
] 

testcase4o = [
    #期待する結果
    [(False, '壱弐参四五六七八九拾壱弐参四五')],
    [(True, ('壱弐参四五六七八九拾壱弐参四五', 'いろはにほへとちりぬるをわかよ'))],
    [(True, ('壱', 'い')),(False, '弐'),(True, ('参', 'は')),
        (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参'),(True, ('四', 'に')),
        (False, '五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四'),(True, ('五', 'ほ')),
        (False, '六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五'),(True, ('六', 'へ')),
        (False, '七八九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五六'),(True, ('七', 'と')),
        (False, '八九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五六七'),(True, ('八', 'ち')),
        (False, '九拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五六七八'),(True, ('九', 'り')),
        (False, '拾壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五六七八九'),(True, ('拾', 'ぬ')),
        (False, '壱弐参四五')],
    [(True, ('壱', 'い')),(False, '弐参四五六七八九拾'),(True, ('壱', 'る')),
        (False, '弐参四五')],
    [(True, ('壱', 'い')), (True, ('弐', 'ろ')), (False, '参四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'は')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'に')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'ほ')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'へ')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'と')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'ち')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'り')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'ぬ')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'),
        (True, ('参', 'る')), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (True, ('弐', 'ろ')), (False, '参四五六七八九拾壱弐参四五')],
    [(False, '壱弐参四五六七八九'), (False, '拾壱弐参四五')],
    [(False, '壱'), (False, '弐'), (False, '参四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐参四五六七八九拾'), (False, '壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐'), (False, '参'), (False, '四五六七八九拾壱弐参四五')],
    [(True, ('壱', 'い')), (False, '弐参四五六七'),
        (False, '八九拾壱弐参'), (True, ('四', 'か')), (False, '五')],
    [(True, ('壱', 'い')), (False, '弐'), (False, '参'), (True, ('四', 'を')),
        (False, '五六七八九拾壱弐参四五')],
]

class testKanaText(unittest.TestCase):
    #非表示指定の「a-i」「q-y」の動作
    def test04_asruby(self):
        for t, e in zip(testcase4i, testcase4o):
            term = KanaText(t)
            rslt = term.asruby()
            self.assertEqual(e, rslt)

def main():
    unittest.main()

if __name__ == '__main__':
    unittest.main()
